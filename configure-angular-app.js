/**
 * Script pour configurer et d√©marrer l'application Angular sur Replit ou en local
 * Ce script utilise fix-angular-config.js pour adapter automatiquement
 * la configuration selon la version d'Angular CLI
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// D√©tecter si nous sommes sur Replit
const isReplit = process.env.REPL_ID || process.env.REPL_SLUG;

// V√©rifier si nous devons uniquement configurer sans d√©marrer
const configOnly = process.argv.includes('--config-only');

console.log(`üîç D√©tection de l'environnement: ${isReplit ? 'Replit' : 'Local'}`);

try {
  // Ex√©cuter le script de correction de configuration Angular
  console.log('üîß Ex√©cution du script de correction de configuration Angular...');
  execSync('node fix-angular-config.js', { stdio: 'inherit' });
  
  // Obtenir la version d'Angular CLI
  const ngVersionOutput = execSync('cd connect-extension-app && ng version', { encoding: 'utf8' });
  const versionMatch = ngVersionOutput.match(/Angular CLI: (\d+\.\d+\.\d+)/);
  const angularVersion = versionMatch ? versionMatch[1] : null;
  
  console.log(`üìä Version d'Angular CLI: ${angularVersion}`);
  
  // D√©termination du param√®tre √† utiliser (browserTarget ou buildTarget)
  // √Ä partir d'Angular 15+, buildTarget est utilis√© au lieu de browserTarget
  const majorVersion = angularVersion ? parseInt(angularVersion.split('.')[0], 10) : 0;
  const usesBuildTarget = majorVersion >= 15;
  
  // Si nous sommes en mode configuration uniquement, pas besoin de d√©marrer l'application
  if (configOnly) {
    console.log('üîß Configuration termin√©e en mode config-only. L\'application n\'a pas √©t√© d√©marr√©e.');
    process.exit(0);
  }
  
  // D√©terminer la commande √† ex√©cuter en fonction de l'environnement
  let command;
  
  if (isReplit) {
    // Sur Replit, on utilise toujours la configuration replit
    command = 'cd connect-extension-app && ng serve --configuration=replit --host 0.0.0.0 --port 5000 --disable-host-check --proxy-config proxy.conf.json';
  } else {
    // En local, on utilise la configuration par d√©faut mais on doit restaurer le angular.json original
    // car la configuration locale peut n√©cessiter browserTarget au lieu de buildTarget selon la version
    
    console.log('üîÑ Restauration de la configuration Angular d\'origine pour l\'environnement local...');
    const angularJsonBackupPath = path.join(__dirname, 'connect-extension-app', 'angular.json.bak');
    const angularJsonPath = path.join(__dirname, 'connect-extension-app', 'angular.json');
    
    if (fs.existsSync(angularJsonBackupPath)) {
      fs.copyFileSync(angularJsonBackupPath, angularJsonPath);
      console.log('‚úÖ Configuration originale restaur√©e!');
    } else {
      console.warn('‚ö†Ô∏è Aucune sauvegarde trouv√©e, utilisation de la configuration actuelle');
    }
    
    command = 'cd connect-extension-app && ng serve';
  }
  
  console.log(`‚ñ∂Ô∏è Ex√©cution de la commande: ${command}`);
  execSync(command, { stdio: 'inherit' });
  
} catch (error) {
  console.error('‚ùå Erreur lors du d√©marrage de l\'application Angular:', error.message);
  process.exit(1);
}